#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'hakiri'

program :name, 'hakiri'
program :version, Hakiri::VERSION
program :description, 'Hakiri CLI'

command 'manifest:generate' do |c|
  c.syntax = 'hakiri manifest:generate'
  c.summary = 'Generates a manifest file with example technologies.'
  c.description = 'This command generates a JSON file with technologies supported by Hakiri.'

  c.action do |args, options|
    cli = Hakiri::Manifest.new(args, options)
    cli.generate
  end
end

command 'system:scan' do |c|
  c.syntax = 'hakiri system:scan [options]'
  c.summary = 'Configure your stack with a manifest JSON file.'
  c.description = 'This command grabs your custom stack JSON file and shows vulnerabilities in your project.'
  c.option '--manifest STRING', String, 'Path to your manifest JSON file'
  c.option '--force', 'Force showing vulnerabilities without asking for it first.'
  c.option '--quiet', 'Only show vulnerability report'

  c.action do |args, options|
    options.default :manifest => './manifest.json'

    cli = Hakiri::System.new(args, options)
    cli.scan
  end
end

command 'system:sync' do |c|
  c.syntax = 'hakiri system:sync [options]'
  c.summary = 'Sync your system\'s software versions with the cloud.'
  c.description = 'This command grabs your custom stack JSON file, and syncs it with your project on hakiri.io.'
  c.option '--manifest STRING', String, 'Path to your manifest JSON file stack'
  c.option '--stack INTEGER', String, 'Your stack ID.'
  c.option '--force', 'Force syncing without asking for it first.'

  c.action do |args, options|
    options.default :manifest => './manifest.json'
    options.default :stack => nil

    cli = Hakiri::System.new(args, options)
    cli.sync
  end
end

command 'system:steps' do |c|
  c.syntax = 'hakiri system:steps [options]'
  c.summary = 'Configure your stack in the simple walkthrough.'
  c.description = 'This command launches a step by step walkthrough that will help you customize your stack.'

  c.action do |args, options|
    cli = Hakiri::System.new(args, options)
    cli.steps
  end
end

command 'gemfile:scan' do |c|
  c.syntax = 'hakiri gemfile:scan [options]'
  c.summary = 'Check if Gemfile.lock has any vulnerabilities.'
  c.description = 'This command grabs your Gemfile.lock file and shows vulnerabilities in it.'
  c.option '--gemfile STRING', String, 'Path to your Gemfile.lock'
  c.option '--force', 'Force showing vulnerabilities without asking for it first.'
  c.option '--quiet', 'Only show vulnerability report'
  c.option '--json', 'Output will be in JSON only.'

  c.action do |args, options|
    options.default :gemfile => './Gemfile.lock'

    cli = Hakiri::Gemfile.new(args, options)
    cli.scan
  end
end

command 'gemfile:sync' do |c|
  c.syntax = 'hakiri gemfile:sync [options]'
  c.summary = 'Sync your system\'s Gemfile.lock gem versions with the cloud.'
  c.description = 'This command grabs your Gemfile.lock file, and syncs it with your project on hakiri.io.'
  c.option '--gemfile STRING', String, 'Path to your Gemfile.lock'
  c.option '--stack INTEGER', String, 'Your stack ID.'
  c.option '--force', 'Force syncing without asking for it first.'

  c.action do |args, options|
    options.default :gemfile => './Gemfile.lock'
    options.default :stack => nil

    cli = Hakiri::Gemfile.new(args, options)
    cli.sync
  end
end

command 'code:report' do |c|
  c.syntax = 'hakiri code:report [options]'
  c.summary = 'Check code report on the latest push.'
  c.description = 'This command connects to Hakiri and returns a report on vulnerabilities from the latest push.'
  c.option '--stack INTEGER', String, 'Your stack ID.'
  c.option '--force', 'Force showing vulnerabilities without asking for it first.'

  c.action do |args, options|
    cli = Hakiri::Code.new(args, options)
    cli.report
  end
end
